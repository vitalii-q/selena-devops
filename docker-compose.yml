version: "3.8"
# link http://localhost:9064/

services:      
  hotels-service:
    container_name: hotels-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/hotels-service:latest
    build: 
      context: ./hotels-service
      dockerfile: Dockerfile
    ports:
      - "${HOTELS_SERVICE_PORT}:${HOTELS_SERVICE_PORT}"
    depends_on:
      - cockroachdb
      - redis
    env_file:
      - .env
      - ./hotels-service/.env

  users-service:
    container_name: users-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/users-service:latest
    restart: always
    build:
      context: ./users-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
      - ./users-service/.env
    volumes:
      - ./users-service:/app/users-service
      - /app/users-service/bin
      - /app/users-service/tmp
    command: air -c .air.toml  # Запускаем air в контейнере для горячей перезагрузки

  bookings-service:
    container_name: bookings-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/bookings-service:latest
    build:
      context: ./bookings-service
      dockerfile: Dockerfile
    ports:
      - "${BOOKINGS_SERVICE_PORT}:${BOOKINGS_SERVICE_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mariadb:9266/bookings
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    depends_on:
      - mariadb
    command: ["wait-for-mariadb.sh", "db:3306", "--", "java", "-jar", "/app.jar"]

  cockroachdb:
    image: cockroachdb/cockroach:v22.2.7
    container_name: cockroachdb_${PROJECT_SUFFIX}
    command: start-single-node --insecure
    ports:
      - "${COCKROACH_PORT}:${COCKROACH_PORT}"
    volumes:
    - cockroach_data:/cockroach/cockroach-data

  postgres:
    image: postgres:13
    container_name: postgres_${PROJECT_SUFFIX}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mariadb:
    image: mariadb:latest
    container_name: mariadb_${PROJECT_SUFFIX}
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: bookings
    ports:
      - "${MARIADB_PORT}:${MARIADB_PORT}"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=127.0.0.1", "--user=root", "--password=password"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis_${PROJECT_SUFFIX}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data

  kong-database:
    image: postgres:15
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5433:5432"

  kong-migrations:
    image: kong/kong-gateway:latest
    container_name: kong-migrations
    restart: "no"
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap

  kong:
    image: kong/kong-gateway:latest
    container_name: kong
    restart: always
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8000:8000"   # HTTP-прокси
      - "8443:8443"   # HTTPS-прокси (если нужно)
      - "8001:8001"   # Админ-интерфейс Kong
      - "8444:8444"
    volumes:
      - ./api-gateway/config:/etc/kong/
      - ./api-gateway/plugins:/usr/local/kong/plugins/

volumes:
  cockroach_data: {}
  redis_data: {}
  postgres_data: {}
  mariadb_data: {}
  kong_data: {}

networks:
  app-network:
    driver: bridge