version: "3.8"
# link http://localhost:9064/

# Сборка prod версии
# docker compose -f docker-compose.yml build
# 
# Запуск prod версии
# docker compose -f docker-compose.yml up -d

services:
  hotels-service:
    container_name: hotels-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/hotels-service:latest
    platform: linux/amd64
    build: 
      context: ./hotels-service
      dockerfile: Dockerfile
    #environment:
    #  - HOTELS_COCKROACH_USER=${HOTELS_COCKROACH_USER}
    #  - HOTELS_COCKROACH_PASSWORD=${HOTELS_COCKROACH_PASSWORD}
    #  - HOTELS_COCKROACH_DB_NAME=${HOTELS_COCKROACH_DB_NAME}
    #  - HOTELS_COCKROACH_HOST=${HOTELS_COCKROACH_HOST}
    #  - HOTELS_COCKROACH_PORT=${HOTELS_COCKROACH_PORT}
    ports:
      - "${HOTELS_SERVICE_PORT}:${HOTELS_SERVICE_PORT}"
    volumes:
      - ./hotels-service:/app # перезаписывает файлы при старте контейнере
      - ./secure/certs:/certs
    depends_on:
      - hotels-db
      - redis
    env_file:
      - .env
      - ./hotels-service/.env
    networks:
    - app_network

  users-service:
    container_name: users-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/users-service:latest
    restart: always
    build:
      context: ./users-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - app_network
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
      - ./users-service/.env
    volumes:
      - ./users-service:/app/users-service
      - /app/users-service/bin
      - /app/users-service/tmp
    command: air -c .air.toml  # Запускаем air в контейнере для горячей перезагрузки

  bookings-service:
    container_name: bookings-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/bookings-service:latest
    build:
      context: ./bookings-service
      dockerfile: Dockerfile.prod
    ports:
      - "${BOOKINGS_SERVICE_PORT}:${BOOKINGS_SERVICE_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=${BOOKINGS_DATASOURCE_URL}  
      - SPRING_DATASOURCE_USERNAME=${BOOKINGS_MARIADB_USER}
      - SPRING_DATASOURCE_PASSWORD=${BOOKINGS_MARIADB_PASSWORD}
      - SPRING_PROFILES_ACTIVE=${PROJECT_SUFFIX}
    depends_on:
      - maria-db
    command: ["wait-for-mariadb.sh", "mariadb:3306", "--", "java", "-jar", "/app/app.jar"]
    networks:
      - app_network

  hotels-db:
    image: cockroachdb/cockroach:v22.2.7
    container_name: hotels-db_${PROJECT_SUFFIX}
    command: >
      start-single-node
      --certs-dir=/certs
      --http-addr=0.0.0.0:8080
      --sql-addr=0.0.0.0:26258
    ports:
      - "${HOTELS_COCKROACH_PORT}:26258"
    volumes:
      - hotels-data:/cockroach/cockroach-data
      - ./secure/certs:/certs
    networks:
      - app_network

  postgres:
    image: postgres:13
    container_name: postgres_${PROJECT_SUFFIX}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app_network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  maria-db:
    image: mariadb:10.11
    container_name: maria-db_${PROJECT_SUFFIX}
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: bookings
    ports:
      - "${MARIADB_PORT}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=127.0.0.1", "--user=root", "--password=password"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app_network
    volumes:
    - mariadb-data:/var/lib/mysql
    - ./bookings-service/_docker/db:/docker-entrypoint-initdb.d

  redis:
    image: redis:7
    container_name: redis_${PROJECT_SUFFIX}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data

  kong-db:
    image: postgres:15
    container_name: kong-db_${PROJECT_SUFFIX}
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
    - app_network
    volumes:
    - kong-db-data:/var/lib/postgresql/data

  kong-migrations:
    image: kong:3.9
    container_name: kong-migrations_${PROJECT_SUFFIX}
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db_${PROJECT_SUFFIX}
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_PORT: "5432"
    #command: kong migrations bootstrap
    #command: ["sh", "-c", "kong migrations bootstrap && tail -f /dev/null"]
    networks:
      - app_network
    #entrypoint: ["sh", "-c", "kong migrations bootstrap && exit 0"]
    entrypoint: ["sh", "-c", "kong migrations up && kong migrations finish && exit 0"]
    depends_on:
      kong-db:
        condition: service_healthy

  kong:
    image: kong:3.9
    container_name: kong_${PROJECT_SUFFIX}
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db_${PROJECT_SUFFIX}
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PG_PORT: "5432"
      KONG_PORTAL: "true"                     # Включаем портал
      KONG_PORTAL_GUI_HOST: "localhost:8003"   # Адрес для доступа, если доступ из локальной сети
      KONG_PORTAL_API_URI: "http://kong:8001"  # URL API для порта администратора
      KONG_LOG_LEVEL: debug
      KONG_ADMIN_GUI_SSL_CERT: /usr/local/kong/ssl/admin-gui-kong-default.crt   
      KONG_ADMIN_GUI_SSL_CERT_KEY: /usr/local/kong/ssl/admin-gui-kong-default.key
      KONG_PROXY_ACCESS_LOG: /usr/local/kong/logs/access.log # add logs to host
      KONG_PROXY_ERROR_LOG: /usr/local/kong/logs/error.log # add logs to host
      KONG_ADMIN_ACCESS_LOG: /usr/local/kong/logs/admin_access.log
      KONG_ADMIN_ERROR_LOG: /usr/local/kong/logs/admin_error.log
      KONG_ADMIN_GUI_ACCESS_LOG: /usr/local/kong/logs/admin_gui_access.log
      KONG_ADMIN_GUI_ERROR_LOG: /usr/local/kong/logs/admin_gui_error.log
      KONG_TRUSTED_IPS: "0.0.0.0/0"
      KONG_REAL_IP_HEADER: "X-Forwarded-Proto"     # доверять заголовку (для https)
      KONG_SSL_CERT: /usr/local/kong/ssl/kong-default.crt
      KONG_SSL_CERT_KEY: /usr/local/kong/ssl/kong-default.key
      KONG_SSL_CERT_ECDSA: /usr/local/kong/ssl/kong-default-ecdsa.crt
      KONG_SSL_CERT_ECDSA_KEY: /usr/local/kong/ssl/kong-default-ecdsa.key
      KONG_PORTAL_GUI_SSL_CERT: /usr/local/kong/ssl/portal.crt
      KONG_PORTAL_GUI_SSL_CERT_KEY: /usr/local/kong/ssl/portal.key
      KONG_PORTAL_API_SSL_CERT: /usr/local/kong/ssl/portal.crt
      KONG_PORTAL_API_SSL_CERT_KEY: /usr/local/kong/ssl/portal.key
    ports:
      - "8000:8000"   # HTTP-прокси
      - "8443:8443"   # HTTPS-прокси
      - "8001:8001"   # Админ-интерфейс Kong (для взаимодействия с API)
    volumes:
      - ./api-gateway/config/.kong_env:/usr/local/kong/.kong_env
      - ./api-gateway/config:/etc/kong/
      - ./api-gateway/certs/admin-gui-kong-default.crt:/usr/local/kong/ssl/admin-gui-kong-default.crt:ro # :ro - read-only
      - ./api-gateway/certs/admin-gui-kong-default.key:/usr/local/kong/ssl/admin-gui-kong-default.key:ro # :ro - read-only
      - ./api-gateway/certs/admin-gui-kong-default.key:/usr/local/kong/ssl/kong-default.key:ro # :ro - read-only
      - ./api-gateway/certs/admin-gui-kong-default.crt:/usr/local/kong/ssl/kong-default.crt:ro # :ro - read-only
      - ./api-gateway/certs/kong-default-ecdsa.key:/usr/local/kong/ssl/kong-default-ecdsa.key:ro
      - ./api-gateway/certs/kong-default-ecdsa.crt:/usr/local/kong/ssl/kong-default-ecdsa.crt:ro
      - ./api-gateway/certs/admin-gui-kong-default.crt:/usr/local/kong/ssl/portal.crt:ro
      - ./api-gateway/certs/admin-gui-kong-default.key:/usr/local/kong/ssl/portal.key:ro
      - ./api-gateway/certs/ffdhe2048.pem:/usr/local/kong/ssl/ffdhe2048.pem
      - ./api-gateway/plugins:/usr/local/kong/plugins/
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./api-gateway/logs:/usr/local/kong/logs
      - type: bind
        source: ./api-gateway/tmp/kong-access.log
        target: /tmp/kong-access.log
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      kong-db:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    command: ["kong", "start"]

volumes:
  hotels-data: {}
  redis-data: {}
  postgres-data: {}
  mariadb-data: {}
  kong-db-data: {}
  kong-data: {}

networks:
  app_network:
    driver: bridge