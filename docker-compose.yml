version: "3.8"
# link http://localhost:9064/

services:      
  hotels-service:
    container_name: hotels-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/hotels-service:latest
    build: 
      context: ./hotels-service
      dockerfile: Dockerfile
    ports:
      - "${HOTELS_SERVICE_PORT}:${HOTELS_SERVICE_PORT}"
    depends_on:
      - cockroach-db
      - redis
    env_file:
      - .env
      - ./hotels-service/.env

  users-service:
    container_name: users-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/users-service:latest
    restart: always
    build:
      context: ./users-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
      - ./users-service/.env
    volumes:
      - ./users-service:/app/users-service
      - /app/users-service/bin
      - /app/users-service/tmp
    command: air -c .air.toml  # Запускаем air в контейнере для горячей перезагрузки

  bookings-service:
    container_name: bookings-service_${PROJECT_SUFFIX}
    image: ghcr.io/vitalii-q/selena/bookings-service:latest
    build:
      context: ./bookings-service
      dockerfile: Dockerfile
    ports:
      - "${BOOKINGS_SERVICE_PORT}:${BOOKINGS_SERVICE_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mariadb:9266/bookings
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    depends_on:
      - maria-db
    command: ["wait-for-mariadb.sh", "db:3306", "--", "java", "-jar", "/app.jar"]

  cockroach-db:
    image: cockroachdb/cockroach:v22.2.7
    container_name: cockroach-db_${PROJECT_SUFFIX}
    command: start-single-node --insecure
    ports:
      - "${COCKROACH_PORT}:${COCKROACH_PORT}"
    volumes:
    - cockroach-data:/cockroach/cockroach-data

  postgres:
    image: postgres:13
    container_name: postgres_${PROJECT_SUFFIX}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  maria-db:
    image: mariadb:latest
    container_name: maria-db_${PROJECT_SUFFIX}
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: bookings
    ports:
      - "${MARIADB_PORT}:${MARIADB_PORT}"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=127.0.0.1", "--user=root", "--password=password"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app-network
    volumes:
    - mariadb-data:/var/lib/mysql

  redis:
    image: redis:7
    container_name: redis_${PROJECT_SUFFIX}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data

  kong-db:
    image: postgres:15
    container_name: kong-db_${PROJECT_SUFFIX}
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
    - kong_network

  kong-migrations:
    image: kong/kong-gateway:latest
    container_name: kong-migrations_${PROJECT_SUFFIX}
    restart: "no"
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db_${PROJECT_SUFFIX}
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_PORT: "5432"
    command: kong migrations bootstrap
    #command: ["sh", "-c", "kong migrations bootstrap && tail -f /dev/null"]
    networks:
      - kong_network

  kong:
    image: kong/kong-gateway:latest
    container_name: kong_${PROJECT_SUFFIX}
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db_${PROJECT_SUFFIX}
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PG_PORT: "5432"
      #KONG_CONFIG: "/etc/kong/kong.conf"
    ports:
      - "8000:8000"   # HTTP-прокси
      - "8443:8443"   # HTTPS-прокси (если нужно)
      - "8001:8001"   # Админ-интерфейс Kong
      - "8444:8444"
    volumes:
      - ./api-gateway/config/.kong_env:/usr/local/kong/.kong_env
      - ./api-gateway/config:/etc/kong/
      - ./api-gateway/certs/admin-gui-kong-default.crt:/usr/local/kong/ssl/admin-gui-kong-default.crt
      - ./api-gateway/certs/admin-gui-kong-default.key:/usr/local/kong/ssl/admin-gui-kong-default.key
      - ./api-gateway/plugins:/usr/local/kong/plugins/
      - ./wait-for-it.sh:/wait-for-it.sh
    networks:
      - kong_network
    depends_on:
      - kong-db
      - kong-migrations
    command: ["bash", "/wait-for-it.sh", "kong-migrations:9000", "--timeout=15", "--", "kong", "reload"]


  konga-db:
    image: postgres:15
    container_name: konga-db_${PROJECT_SUFFIX}
    restart: always
    environment:
      POSTGRES_USER: konga_user
      POSTGRES_PASSWORD: konga_password
      POSTGRES_DB: konga_db
    ports:
      - "5434:5432"  # Порт для доступа к базе данных Konga

  konga:
    image: pantsel/konga
    container_name: konga_${PROJECT_SUFFIX}
    platform: linux/amd64  # Добавляем поддержку платформы
    ports:
      - "1337:1337"
    networks:
      - selena-dev_default
    environment:
      KONGA_HOST: kong:8001
      KONGA_NODE_ID: kong
      KONGA_DB_ADAPTER: "postgres"
      KONGA_DB_HOST: "konga-db_${PROJECT_SUFFIX}"  # Имя нового контейнера с БД для Konga
      KONGA_DB_USER: "konga_user"       # Имя пользователя для подключения
      KONGA_DB_PASSWORD: "konga_password"  # Пароль для подключения
      KONGA_DB_NAME: "konga_db"          # Имя базы данных для Konga
    volumes:
    - konga-data:/app/konga
    depends_on:
      - konga-db

volumes:
  cockroach-data: {}
  redis-data: {}
  postgres-data: {}
  mariadb-data: {}
  kong-data: {}
  konga-data: {}

networks:
  app-network:
    driver: bridge
  selena-dev_default:
    driver: bridge
  kong_network:
    driver: bridge